 ///////////////////////////////////////////////////////////////
 //
 // Copyright (c) Microsoft.
 // Licensed under the MIT license.
 // WARNING : DO NOT ATTEMPT TO MODIFY THIS FILE MANUALLY
 // 
 // This class is autogenerated from generic_collection.cs
 //
 ///////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Specialized;
using System.Text;
using System.Globalization;
#ifdef USE_SMO
using Microsoft.SqlServer.Management.Smo;
#endif
using Microsoft.SqlServer.Management.Sdk.Sfc;
#ifdef DATABASE
using Microsoft.SqlServer.Management.Common;
#endif
#ifdef DATABASE
#define EMPTY
EMPTY#if MICROSOFTDATA
using Microsoft.Data.SqlClient;
EMPTY#else
using System.Data.SqlClient;
EMPTY#endif
#endif
#include "coll_macros.h"

namespace NAMESPACE_NAME
{

	///<summary>
	/// Strongly typed list of MAPPED_TYPE objects
	/// Has strongly typed support for all of the methods of the sorted list class
	///</summary>
	public SEALED_IMP PARTIAL_KEYWORD class TOKEN_PASTE( MAPPED_TYPE, COLLECTION_SUFFIX) : SimpleObjectCollectionBase
	{
#ifdef CUSTOM_COLLATION
		//has custom string comparer
		StringComparer m_comparer;

		//must initialize in constructor
		internal TOKEN_PASTE( MAPPED_TYPE, COLLECTION_SUFFIX)(SqlSmoObject parentInstance, StringComparer comparer)  : base(parentInstance)
		{
			m_comparer = comparer;
		}

		override internal StringComparer StringComparer
		{
			get 
			{
				return m_comparer;
			}
		}
#else
		internal TOKEN_PASTE( MAPPED_TYPE, COLLECTION_SUFFIX)(SqlSmoObject parentInstance)  : base(parentInstance)
		{
		}
#endif

#ifdef PARENT
		public PARENT Parent
		{
			get
			{
				return this.ParentInstance as PARENT;
			}
		}
#endif
		
		public MAPPED_TYPE this[Int32 index]
		{
			get
			{ 
				return GetObjectByIndex(index) as MAPPED_TYPE;
			}
		}

#ifndef EXCLUDE_NAME_ACCESSOR
		// returns wrapper class
		public MAPPED_TYPE this[KEY_TYPE name]
		{
			get
			{
                #ifdef DATABASE
    
                try
                 {
                     
                #endif
    
	    			    return  GetObjectByName(name) as MAPPED_TYPE;
                    
                #ifdef DATABASE

                 }
                catch (Microsoft.SqlServer.Management.Common.ConnectionFailureException cfe)
                {                  
                    if (cfe.InnerException is SqlException)
                    {
                        if ((cfe.InnerException as SqlException).Number == 4060)
                        {                           
                            Microsoft.SqlServer.Management.Diagnostics.TraceHelper.LogExCatch(cfe);
                            // this exception occurs if the user doesn't have access to 
                            //  the database with the input name
                            //  in such a case the expected behavior is to return null  
                            return null;
                        }
                    }
                    throw cfe;
                }
                #endif

			}
		}
#endif

		public void CopyTo(MAPPED_TYPE[] array, int index)
		{
			((ICollection)this).CopyTo(array, index);
		}
		
#ifdef ITEM_BY_ID
		public MAPPED_TYPE ItemById(int id)
		{
			return (MAPPED_TYPE)GetItemById(id);
		}
#endif

#ifdef ITEM_BY_LANGID
		public MAPPED_TYPE ItemById(int id)
		{
			return (MAPPED_TYPE)GetItemById(id, "LocaleID");
		}
#endif

#ifdef SCRIPT_OBJECTS
		public StringCollection Script()
		{
			return this.Script(new ScriptingOptions());
		}

		public StringCollection Script(ScriptingOptions scriptingOptions)
		{
			if( this.Count <= 0 )
			{
				return new StringCollection();
			}

			SqlSmoObject [] scriptList = new SqlSmoObject[this.Count];
			int i = 0;
			foreach(SqlSmoObject o in this)
			{
				scriptList[i++] = o;
			}
			Scripter scr = new Scripter(scriptList[0].GetServerObject());
			scr.Options = scriptingOptions;
			return scr.Script(scriptList);
		}
#endif

		protected override Type GetCollectionElementType()
		{
			return typeof(MAPPED_TYPE);
		}

		internal override SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state)
		{
			return  new MAPPED_TYPE(this, key, state);
		}


#ifdef REMOVE

		public void Remove(MAPPED_TYPE MAPPED_TYPE_VAR)
		{
			if( null == MAPPED_TYPE_VAR )
				throw new FailedOperationException(ExceptionTemplates.RemoveCollection, this, new ArgumentNullException(STRINGER(MAPPED_TYPE_VAR)));
			
			RemoveObj(MAPPED_TYPE_VAR, new SimpleObjectKey(MAPPED_TYPE_VAR.Name));
		}

		public void Remove(string name)
		{
			this.Remove(new SimpleObjectKey(name));
		}

#endif // REMOVE		

		public void Add(MAPPED_TYPE MAPPED_TYPE_VAR) 
		{
			AddImpl(MAPPED_TYPE_VAR);
		}

#ifndef EXCLUDE_NAME_ACCESSOR
		internal SqlSmoObject GetObjectByName(string name)
		{
			return GetObjectByKey(new SimpleObjectKey(name));
		}
#endif

		internal override ObjectKeyBase CreateKeyFromUrn(Urn urn)
		{ 
			string name = urn.GetAttribute("Name");
#ifdef ALLOW_EMPTY_NAME_ATTRIBUTE
			if( null == name)
#else
            if( null == name || name.Length == 0)
#endif
				throw new SmoException(ExceptionTemplates.PropertyMustBeSpecifiedInUrn("Name", urn.Type));
            return new SimpleObjectKey(name);        
        }
#ifdef CASE_SENSITIVE
        /// <summary>
        /// Initializes the storage
        /// </summary>
        protected override void InitInnerCollection()
        {
            InternalStorage = new SmoSortedList(new SimpleObjectCaseSensitiveComparer());
        }
		
        internal class SimpleObjectCaseSensitiveComparer : IComparer
        {
            int IComparer.Compare(object obj1, object obj2)
            {
                return string.Compare((obj1 as SimpleObjectKey).Name, (obj2 as SimpleObjectKey).Name, false, SmoApplication.DefaultCulture);
            }
        }
#endif

	}
}
