 ///////////////////////////////////////////////////////////////
 // Copyright (c) Microsoft.
 // Licensed under the MIT license.
 //
 // WARNING : DO NOT ATTEMPT TO MODIFY THIS FILE MANUALLY
 // 
 // This class is autogenerated from physicalpartitionsegment_generic_collection.cs
 //
 ///////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Specialized;
using System.Text;

#include "coll_macros.h"


namespace NAMESPACE_NAME
{

	///<summary>
	/// Strongly typed list of MAPPED_TYPE objects
	/// Has strongly typed support for all of the methods of the sorted list class
	///</summary>
	public SEALED_IMP PARTIAL_KEYWORD class TOKEN_PASTE( MAPPED_TYPE, COLLECTION_SUFFIX) : PhysicalPartitionSegmentCollectionBase
	{

		internal TOKEN_PASTE( MAPPED_TYPE, COLLECTION_SUFFIX)(SqlSmoObject parentInstance)  : base(parentInstance)
		{
		}

#ifdef PARENT
		public PARENT Parent
		{
			get
			{
				return this.ParentInstance as PARENT;
			}
		}
#endif
		
        public void Add(MAPPED_TYPE MAPPED_TYPE_VAR)
        {
            InternalStorage.Add(new PhysicalPartitionSegmentObjectKey((int)MAPPED_TYPE_VAR.SegmentID),MAPPED_TYPE_VAR);
        }

        public void Remove(MAPPED_TYPE MAPPED_TYPE_VAR)
        {
            InternalStorage.Remove(new PhysicalPartitionSegmentObjectKey((int)MAPPED_TYPE_VAR.SegmentID));
        }
        public void Remove(int segmentID)
        {
            InternalStorage.Remove(new PhysicalPartitionSegmentObjectKey((int)segmentID));
        }

       

		public MAPPED_TYPE this[Int32 index]
		{
			get
			{ 
			    return GetObjectByIndex(index) as MAPPED_TYPE;
			}
		}

        public MAPPED_TYPE GetItemBySegmentID(int segmentID)
		{
			return this[segmentID];
		}

		protected override Type GetCollectionElementType()
		{
			return typeof(MAPPED_TYPE);
		}

		internal override SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state)
		{
			return  new MAPPED_TYPE(this, key, state);
		}

        public void CopyTo(MAPPED_TYPE[] array, int index)
		{
			((ICollection)this).CopyTo(array, index);
		}
		

	}
}
