 ///////////////////////////////////////////////////////////////
 // Copyright (c) Microsoft.
 // Licensed under the MIT license.
 //
 // WARNING : DO NOT ATTEMPT TO MODIFY THIS FILE MANUALLY
 // 
 // This classes is autogenerated from param_generic_collection.cs
 //
 ///////////////////////////////////////////////////////////////

using System;
using System.Data;
using System.Collections;
#ifdef USE_SMO
using Microsoft.SqlServer.Management.Smo;
#endif

#include "coll_macros.h"
namespace NAMESPACE_NAME
{

	///<summary>
	/// Strongly typed list of MAPPED_TYPE objects
	/// Has strongly typed support for all of the methods of the sorted list class
	///</summary>
	public SEALED_IMP PARTIAL_KEYWORD class TOKEN_PASTE( MAPPED_TYPE, COLLECTION_SUFFIX) : ParameterCollectionBase 
	{
		internal TOKEN_PASTE( MAPPED_TYPE, COLLECTION_SUFFIX)(SqlSmoObject parentInstance)  : base(parentInstance)
		{
		}

#ifdef PARENT
		public PARENT Parent
		{
			get
			{
				return this.ParentInstance as PARENT;
			}
		}
#endif

		public MAPPED_TYPE this[Int32 index]
		{
			get
			{ 
				return GetObjectByIndex(index) as MAPPED_TYPE;
			}
		}

		public void CopyTo(MAPPED_TYPE[] array, int index)
		{
			((ICollection)this).CopyTo(array, index);
		}

#ifndef NO_STRING_INDEXER
		// returns wrapper class
		public MAPPED_TYPE this[KEY_TYPE name]
		{
			get
			{
				return GetObjectByKey( new SimpleObjectKey(name)) as MAPPED_TYPE;
			}
		}
#endif

		protected override Type GetCollectionElementType()
		{
			return typeof(MAPPED_TYPE);
		}

		internal override SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state)
		{
			return new MAPPED_TYPE(this, key, state);
		}

#ifdef ADD
		public void Add(MAPPED_TYPE MAPPED_TYPE_VAR)
		{
			AddImpl(MAPPED_TYPE_VAR);
		}

		public void Add(MAPPED_TYPE MAPPED_TYPE_VAR, string insertAtColumnName)
		{
			AddImpl(MAPPED_TYPE_VAR, new SimpleObjectKey(insertAtColumnName));
		}
		
		public void Add(MAPPED_TYPE MAPPED_TYPE_VAR, int insertAtPosition)
		{
			AddImpl(MAPPED_TYPE_VAR, insertAtPosition);
		}
#endif ADD // ADD
#ifdef REMOVE
		public void Remove(MAPPED_TYPE MAPPED_TYPE_VAR)
		{
			if( null == MAPPED_TYPE_VAR )
				throw new FailedOperationException(ExceptionTemplates.RemoveCollection, this, new ArgumentNullException(STRINGER(MAPPED_TYPE_VAR)));
			
			RemoveObj(MAPPED_TYPE_VAR, MAPPED_TYPE_VAR.key);
		}
#endif // REMOVE 
#ifdef ALLOW_REMOVE
        public void Remove(MAPPED_TYPE MAPPED_TYPE_VAR)
		{
			CheckCollectionLock();
			if( null != MAPPED_TYPE_VAR )
			{
				InternalStorage.Remove(MAPPED_TYPE_VAR.key);
				MAPPED_TYPE_VAR.objectInSpace = true;
			}
			else
			{
				if( !MAPPED_TYPE_VAR.key.IsNull )
					throw new MissingObjectException(ExceptionTemplates.ObjectDoesNotExist(GetCollectionElementType().Name, MAPPED_TYPE_VAR.key.ToString()));
				else
					throw new FailedOperationException(ExceptionTemplates.RemoveCollection, this, new ArgumentNullException());
			}
		}

        public void RemoveAll()
        {
			CheckCollectionLock();
            InternalStorage.Clear();
        }
#endif //ALLOW_REMOVE
#ifdef ITEM_BY_ID
		public MAPPED_TYPE ItemById(int id)
		{
			return (MAPPED_TYPE)GetItemById(id);
		}
#endif
		
	}
}
