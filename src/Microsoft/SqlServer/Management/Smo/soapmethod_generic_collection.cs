 ///////////////////////////////////////////////////////////////
 // Copyright (c) Microsoft.
 // Licensed under the MIT license.
 //
 // WARNING : DO NOT ATTEMPT TO MODIFY THIS FILE MANUALLY
 // 
 // This class is autogenerated from message_generic_collection.cs
 //
 ///////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Text;
using System.Net;

#include "coll_macros.h"

namespace NAMESPACE_NAME
{

	///<summary>
	/// Strongly typed list of MAPPED_TYPE objects
	/// Has strongly typed support for all of the methods of the sorted list class
	///</summary>
	public SEALED_IMP class TOKEN_PASTE( MAPPED_TYPE, COLLECTION_SUFFIX) : SoapMethodCollectionBase
	{

		internal TOKEN_PASTE( MAPPED_TYPE, COLLECTION_SUFFIX)(SqlSmoObject parentInstance)  : base(parentInstance)
		{
		}

#ifdef PARENT
		public PARENT Parent
		{
			get
			{
				return this.ParentInstance as PARENT;
			}
		}
#endif
		
		public MAPPED_TYPE this[string name]
		{
			get
			{ 
				return GetObjectByKey(new SoapMethodKey(name, SoapMethodCollectionBase.GetDefaultNamespace())) as MAPPED_TYPE;
			}
		}

		// returns wrapper class
		public MAPPED_TYPE this[string name, string methodNamespace]
		{
			get
			{
				return  GetObjectByKey(new SoapMethodKey(name, methodNamespace)) as MAPPED_TYPE;
			}
		}

		public MAPPED_TYPE this[Int32 index]
		{
			get
			{ 
				return GetObjectByIndex(index) as MAPPED_TYPE;
			}
		}

		protected override Type GetCollectionElementType()
		{
			return typeof(MAPPED_TYPE);
		}

		internal override SqlSmoObject GetCollectionElementInstance(ObjectKeyBase key, SqlSmoState state)
		{
			return  new MAPPED_TYPE(this, key, state);
		}

		public void CopyTo(MAPPED_TYPE[] array, int index)
		{
			((ICollection)this).CopyTo(array, index);
		}

#ifdef ADD_REMOVE
		public void Remove(MAPPED_TYPE MAPPED_TYPE_VAR)
		{
			if( null == MAPPED_TYPE_VAR )
				throw new FailedOperationException(ExceptionTemplates.RemoveCollection, this, new ArgumentNullException(STRINGER(MAPPED_TYPE_VAR)));
			
			RemoveObj(MAPPED_TYPE_VAR, MAPPED_TYPE_VAR.key);
		}

		public void Add(MAPPED_TYPE MAPPED_TYPE_VAR) 
		{
			AddImpl(MAPPED_TYPE_VAR);
		}

#endif 	// ADD_REMOVE

	}
}

