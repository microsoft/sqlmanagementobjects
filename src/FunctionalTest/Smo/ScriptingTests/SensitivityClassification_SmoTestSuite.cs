// Copyright (c) Microsoft.
// Licensed under the MIT license.

using System;
using Microsoft.SqlServer.Management.Common;
using Microsoft.SqlServer.Test.Manageability.Utils;
using Microsoft.SqlServer.Test.Manageability.Utils.TestFramework;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using _SMO = Microsoft.SqlServer.Management.Smo;
using Microsoft.SqlServer.Management.Smo;
using Assert = NUnit.Framework.Assert;




namespace Microsoft.SqlServer.Test.SMO.ScriptingTests
{
    /// <summary>
    /// Test suite for testing Data Classification Labels scripting
    /// </summary>
    [TestClass]
    //[SupportedServerVersionRange(DatabaseEngineType = DatabaseEngineType.SqlAzureDatabase)]
    [UnsupportedDatabaseEngineEdition(DatabaseEngineEdition.SqlDataWarehouse, DatabaseEngineEdition.SqlOnDemand)]
    [UnsupportedFeature(SqlFeature.NoDropCreate)]

    public class SensitivityClassification_SmoTestSuite: SmoTestBase
    {

        /// <summary>
        /// Verifying the script generated by ScriptMaker for Create behavior for standalone databases when sensitivity labels were a part of extended properties of column.
        /// </summary>
        [TestMethod]
        [SupportedServerVersionRange(DatabaseEngineType = DatabaseEngineType.Standalone, MinMajor = 10, MaxMajor = 14)]
        public void Test_CreateClassificationScript_Sql2017AndEarlierOnPrem()
        {
            const string schemaName = "dbo";
            string tableNamePrefix = "ClassifiedTable";

            this.ExecuteWithDbDrop(
                database =>
                {
                    _SMO.Table table = DatabaseObjectHelpers.CreateTable(database, tableNamePrefix, schemaName, null, null, null, false);
                    var column1 = new _SMO.Column(table, "ColA", _SMO.DataType.Int) { SensitivityLabelName = "LabelName_A", SensitivityLabelId = "LabelId_A", SensitivityInformationTypeName = "InfoTypeName_A", SensitivityInformationTypeId = "InfoTypeId_A" };
                    var column2 = new _SMO.Column(table, "ColB", _SMO.DataType.Int) { SensitivityLabelName = "LabelName_B", SensitivityInformationTypeName = "InfoTypeName_B" };
                    column1.Create();
                    column2.Create();

                    database.SensitivityClassifications.Refresh();
                    var scriptingPreferences = new ScriptingPreferences(database)
                    {
                        Behavior = ScriptBehavior.Create
                    };
                    scriptingPreferences.OldOptions.EnforceScriptingPreferences = true;

                    _SMO.SensitivityClassification sensitivityClassification1 = database.SensitivityClassifications[schemaName + "." + table.GetName(scriptingPreferences) + "." + column1.GetName(scriptingPreferences)];
                    _SMO.SensitivityClassification sensitivityClassification2 = database.SensitivityClassifications[schemaName + "." + table.GetName(scriptingPreferences) + "." + column2.GetName(scriptingPreferences)];

                    SmoTestBase.ValidateUrnScripting(database, new[] { sensitivityClassification1.Urn, sensitivityClassification2.Urn },
                        new[]
                        {
                            string.Format("EXEC sp_addextendedproperty @name = N'{0}', @value = N'{1}', @level0type = N'schema', @level0name = N'{2}', @level1type = N'table', @level1name = N'{3}', @level2type = N'column', @level2name = N'{4}'", "sys_sensitivity_label_name", "LabelName_A", schemaName, table.GetName(scriptingPreferences), column1.GetName(scriptingPreferences)) + Environment.NewLine + 
                            string.Format("EXEC sp_addextendedproperty @name = N'{0}', @value = N'{1}', @level0type = N'schema', @level0name = N'{2}', @level1type = N'table', @level1name = N'{3}', @level2type = N'column', @level2name = N'{4}'", "sys_sensitivity_label_id", "LabelId_A", schemaName, table.GetName(scriptingPreferences), column1.GetName(scriptingPreferences)) + Environment.NewLine +
                            string.Format("EXEC sp_addextendedproperty @name = N'{0}', @value = N'{1}', @level0type = N'schema', @level0name = N'{2}', @level1type = N'table', @level1name = N'{3}', @level2type = N'column', @level2name = N'{4}'", "sys_information_type_name", "InfoTypeName_A", schemaName, table.GetName(scriptingPreferences), column1.GetName(scriptingPreferences)) + Environment.NewLine +
                            string.Format("EXEC sp_addextendedproperty @name = N'{0}', @value = N'{1}', @level0type = N'schema', @level0name = N'{2}', @level1type = N'table', @level1name = N'{3}', @level2type = N'column', @level2name = N'{4}'", "sys_information_type_id", "InfoTypeId_A", schemaName, table.GetName(scriptingPreferences), column1.GetName(scriptingPreferences)),
                            string.Format("EXEC sp_addextendedproperty @name = N'{0}', @value = N'{1}', @level0type = N'schema', @level0name = N'{2}', @level1type = N'table', @level1name = N'{3}', @level2type = N'column', @level2name = N'{4}'", "sys_sensitivity_label_name", "LabelName_B", schemaName, table.GetName(scriptingPreferences), column2.GetName(scriptingPreferences)) + Environment.NewLine +
                            string.Format("EXEC sp_addextendedproperty @name = N'{0}', @value = N'{1}', @level0type = N'schema', @level0name = N'{2}', @level1type = N'table', @level1name = N'{3}', @level2type = N'column', @level2name = N'{4}'", "sys_information_type_name", "InfoTypeName_B", schemaName, table.GetName(scriptingPreferences), column2.GetName(scriptingPreferences)),
                        }, scriptingPreferences, true);
                });
        }



         /// <summary>
        /// Verifying the script generated by ScriptMaker for Drop behavior for standalone databases when sensitivity labels were a part of extended properties of column.
        /// </summary>
        [TestMethod]
        [SupportedServerVersionRange(DatabaseEngineType = DatabaseEngineType.Standalone, MinMajor = 10, MaxMajor = 14)]
        public void Test_DropClassificationScript_Sql2017AndEarlierOnPrem()
        {
            const string schemaName = "dbo";
            string tableNamePrefix = "ClassifiedTable";

            this.ExecuteWithDbDrop(
                database =>
                {
                    _SMO.Table table = DatabaseObjectHelpers.CreateTable(database, tableNamePrefix, schemaName, null, null, null, false);
                    var column1 = new _SMO.Column(table, "ColA", _SMO.DataType.Int) { SensitivityLabelName = "LabelName_A", SensitivityLabelId = "LabelId_A", SensitivityInformationTypeName = "InfoTypeName_A", SensitivityInformationTypeId = "InfoTypeId_A" };
                    var column2 = new _SMO.Column(table, "ColB", _SMO.DataType.Int) { SensitivityLabelName = "LabelName_B", SensitivityInformationTypeName = "InfoTypeName_B" };
                    column1.Create();
                    column2.Create();

                    database.SensitivityClassifications.Refresh();
                    var scriptingPreferences = new ScriptingPreferences(database)
                    {
                        Behavior = ScriptBehavior.Drop
                    };
                    scriptingPreferences.OldOptions.EnforceScriptingPreferences = true;

                    _SMO.SensitivityClassification sensitivityClassification1 = database.SensitivityClassifications[schemaName + "." + table.GetName(scriptingPreferences) + "." + column1.GetName(scriptingPreferences)];
                    _SMO.SensitivityClassification sensitivityClassification2 = database.SensitivityClassifications[schemaName + "." + table.GetName(scriptingPreferences) + "." + column2.GetName(scriptingPreferences)];

                    string scriptDropPrefix = @"if exists(
SELECT s.name AS schema_name
FROM sys.columns c
LEFT JOIN sys.tables t ON t.object_id = c.object_id
LEFT JOIN sys.schemas s ON s.schema_id = t.schema_id
LEFT JOIN sys.extended_properties EP ON c.object_id = EP.major_id AND c.column_id = EP.minor_id and EP.name = N'{0}'
WHERE s.name = N'{1}' AND t.name = N'{2}' AND c.name = N'{3}' AND EP.value IS NOT NULL
)".FixNewLines();

                    SmoTestBase.ValidateUrnScripting(database, new[] { sensitivityClassification1.Urn, sensitivityClassification2.Urn },
                        new[]
                        {
                            string.Format(scriptDropPrefix + Environment.NewLine + "EXEC sp_dropextendedproperty @name = N'{0}', @level0type = N'schema', @level0name = N'{1}', @level1type = N'table', @level1name = N'{2}', @level2type = N'column', @level2name = N'{3}'", "sys_sensitivity_label_name", schemaName, table.GetName(scriptingPreferences), column1.GetName(scriptingPreferences)) + Environment.NewLine + 
                            string.Format(scriptDropPrefix + Environment.NewLine + "EXEC sp_dropextendedproperty @name = N'{0}', @level0type = N'schema', @level0name = N'{1}', @level1type = N'table', @level1name = N'{2}', @level2type = N'column', @level2name = N'{3}'", "sys_sensitivity_label_id", schemaName, table.GetName(scriptingPreferences), column1.GetName(scriptingPreferences)) + Environment.NewLine +
                            string.Format(scriptDropPrefix + Environment.NewLine + "EXEC sp_dropextendedproperty @name = N'{0}', @level0type = N'schema', @level0name = N'{1}', @level1type = N'table', @level1name = N'{2}', @level2type = N'column', @level2name = N'{3}'", "sys_information_type_name", schemaName, table.GetName(scriptingPreferences), column1.GetName(scriptingPreferences)) + Environment.NewLine +
                            string.Format(scriptDropPrefix + Environment.NewLine + "EXEC sp_dropextendedproperty @name = N'{0}', @level0type = N'schema', @level0name = N'{1}', @level1type = N'table', @level1name = N'{2}', @level2type = N'column', @level2name = N'{3}'", "sys_information_type_id", schemaName, table.GetName(scriptingPreferences), column1.GetName(scriptingPreferences)),
                            
                            string.Format(scriptDropPrefix + Environment.NewLine + "EXEC sp_dropextendedproperty @name = N'{0}', @level0type = N'schema', @level0name = N'{1}', @level1type = N'table', @level1name = N'{2}', @level2type = N'column', @level2name = N'{3}'", "sys_sensitivity_label_name", schemaName, table.GetName(scriptingPreferences), column2.GetName(scriptingPreferences)) + Environment.NewLine +
                            string.Format(scriptDropPrefix + Environment.NewLine + "EXEC sp_dropextendedproperty @name = N'{0}', @level0type = N'schema', @level0name = N'{1}', @level1type = N'table', @level1name = N'{2}', @level2type = N'column', @level2name = N'{3}'", "sys_information_type_name", schemaName, table.GetName(scriptingPreferences), column2.GetName(scriptingPreferences)),
                        }, scriptingPreferences, true);
                });
        }



        /// <summary>
        /// Verifying the script generated by ScriptMaker for Drop and Create behavior for standalone databases when sensitivity labels were a part of extended properties of column.
        /// </summary>
        [TestMethod]
        [SupportedServerVersionRange(DatabaseEngineType = DatabaseEngineType.Standalone, MinMajor = 10, MaxMajor = 14)]
        public void Test_DropAndCreateClassificationScript_Sql2017AndEarlierOnPrem()
        {
            const string schemaName = "dbo";
            string tableNamePrefix = "ClassifiedTable";

            this.ExecuteWithDbDrop(
                database =>
                {
                    _SMO.Table table = DatabaseObjectHelpers.CreateTable(database, tableNamePrefix, schemaName, null, null, null, false);
                    var column1 = new _SMO.Column(table, "ColA", _SMO.DataType.Int) { SensitivityLabelName = "LabelName_A", SensitivityLabelId = "LabelId_A", SensitivityInformationTypeName = "InfoTypeName_A", SensitivityInformationTypeId = "InfoTypeId_A" };
                    var column2 = new _SMO.Column(table, "ColB", _SMO.DataType.Int) { SensitivityLabelName = "LabelName_B", SensitivityInformationTypeName = "InfoTypeName_B" };
                    column1.Create();
                    column2.Create();

                    database.SensitivityClassifications.Refresh();
                    var scriptingPreferences = new ScriptingPreferences(database)
                    {
                        Behavior = ScriptBehavior.DropAndCreate
                    };
                    scriptingPreferences.OldOptions.EnforceScriptingPreferences = true;

                    _SMO.SensitivityClassification sensitivityClassification1 = database.SensitivityClassifications[schemaName + "." + table.GetName(scriptingPreferences) + "." + column1.GetName(scriptingPreferences)];
                    _SMO.SensitivityClassification sensitivityClassification2 = database.SensitivityClassifications[schemaName + "." + table.GetName(scriptingPreferences) + "." + column2.GetName(scriptingPreferences)];

                    string scriptDropPrefix = @"if exists(
SELECT s.name AS schema_name
FROM sys.columns c
LEFT JOIN sys.tables t ON t.object_id = c.object_id
LEFT JOIN sys.schemas s ON s.schema_id = t.schema_id
LEFT JOIN sys.extended_properties EP ON c.object_id = EP.major_id AND c.column_id = EP.minor_id and EP.name = N'{0}'
WHERE s.name = N'{1}' AND t.name = N'{2}' AND c.name = N'{3}' AND EP.value IS NOT NULL
)".FixNewLines();

                    SmoTestBase.ValidateUrnScripting(database, new[] { sensitivityClassification1.Urn, sensitivityClassification2.Urn },
                        new[]
                        {
                            string.Format(scriptDropPrefix + Environment.NewLine + "EXEC sp_dropextendedproperty @name = N'{0}', @level0type = N'schema', @level0name = N'{1}', @level1type = N'table', @level1name = N'{2}', @level2type = N'column', @level2name = N'{3}'", "sys_sensitivity_label_name", schemaName, table.GetName(scriptingPreferences), column1.GetName(scriptingPreferences)) + Environment.NewLine +
                            string.Format(scriptDropPrefix + Environment.NewLine + "EXEC sp_dropextendedproperty @name = N'{0}', @level0type = N'schema', @level0name = N'{1}', @level1type = N'table', @level1name = N'{2}', @level2type = N'column', @level2name = N'{3}'", "sys_sensitivity_label_id", schemaName, table.GetName(scriptingPreferences), column1.GetName(scriptingPreferences)) + Environment.NewLine +
                            string.Format(scriptDropPrefix + Environment.NewLine + "EXEC sp_dropextendedproperty @name = N'{0}', @level0type = N'schema', @level0name = N'{1}', @level1type = N'table', @level1name = N'{2}', @level2type = N'column', @level2name = N'{3}'", "sys_information_type_name", schemaName, table.GetName(scriptingPreferences), column1.GetName(scriptingPreferences)) + Environment.NewLine +
                            string.Format(scriptDropPrefix + Environment.NewLine + "EXEC sp_dropextendedproperty @name = N'{0}', @level0type = N'schema', @level0name = N'{1}', @level1type = N'table', @level1name = N'{2}', @level2type = N'column', @level2name = N'{3}'", "sys_information_type_id", schemaName, table.GetName(scriptingPreferences), column1.GetName(scriptingPreferences)),

                            string.Format("EXEC sp_addextendedproperty @name = N'{0}', @value = N'{1}', @level0type = N'schema', @level0name = N'{2}', @level1type = N'table', @level1name = N'{3}', @level2type = N'column', @level2name = N'{4}'", "sys_sensitivity_label_name", "LabelName_A", schemaName, table.GetName(scriptingPreferences), column1.GetName(scriptingPreferences)) + Environment.NewLine + 
                            string.Format("EXEC sp_addextendedproperty @name = N'{0}', @value = N'{1}', @level0type = N'schema', @level0name = N'{2}', @level1type = N'table', @level1name = N'{3}', @level2type = N'column', @level2name = N'{4}'", "sys_sensitivity_label_id", "LabelId_A", schemaName, table.GetName(scriptingPreferences), column1.GetName(scriptingPreferences)) + Environment.NewLine +
                            string.Format("EXEC sp_addextendedproperty @name = N'{0}', @value = N'{1}', @level0type = N'schema', @level0name = N'{2}', @level1type = N'table', @level1name = N'{3}', @level2type = N'column', @level2name = N'{4}'", "sys_information_type_name", "InfoTypeName_A", schemaName, table.GetName(scriptingPreferences), column1.GetName(scriptingPreferences)) + Environment.NewLine +
                            string.Format("EXEC sp_addextendedproperty @name = N'{0}', @value = N'{1}', @level0type = N'schema', @level0name = N'{2}', @level1type = N'table', @level1name = N'{3}', @level2type = N'column', @level2name = N'{4}'", "sys_information_type_id", "InfoTypeId_A", schemaName, table.GetName(scriptingPreferences), column1.GetName(scriptingPreferences)),

                            string.Format(scriptDropPrefix + Environment.NewLine + "EXEC sp_dropextendedproperty @name = N'{0}', @level0type = N'schema', @level0name = N'{1}', @level1type = N'table', @level1name = N'{2}', @level2type = N'column', @level2name = N'{3}'", "sys_sensitivity_label_name", schemaName, table.GetName(scriptingPreferences), column2.GetName(scriptingPreferences)) + Environment.NewLine +
                            string.Format(scriptDropPrefix + Environment.NewLine + "EXEC sp_dropextendedproperty @name = N'{0}', @level0type = N'schema', @level0name = N'{1}', @level1type = N'table', @level1name = N'{2}', @level2type = N'column', @level2name = N'{3}'", "sys_information_type_name", schemaName, table.GetName(scriptingPreferences), column2.GetName(scriptingPreferences)),

                            string.Format("EXEC sp_addextendedproperty @name = N'{0}', @value = N'{1}', @level0type = N'schema', @level0name = N'{2}', @level1type = N'table', @level1name = N'{3}', @level2type = N'column', @level2name = N'{4}'", "sys_sensitivity_label_name", "LabelName_B", schemaName, table.GetName(scriptingPreferences), column2.GetName(scriptingPreferences)) + Environment.NewLine +
                            string.Format("EXEC sp_addextendedproperty @name = N'{0}', @value = N'{1}', @level0type = N'schema', @level0name = N'{2}', @level1type = N'table', @level1name = N'{3}', @level2type = N'column', @level2name = N'{4}'", "sys_information_type_name", "InfoTypeName_B", schemaName, table.GetName(scriptingPreferences), column2.GetName(scriptingPreferences)),
                        }, scriptingPreferences, true);
                });
        }



        /// <summary>
        /// Verifying the script generated by ScriptMaker for Create behavior when sensitivity labels are column properties.
        /// </summary>
        [TestMethod]
        [SupportedServerVersionRange(DatabaseEngineType = DatabaseEngineType.Standalone, MinMajor = 15)]
        [SupportedServerVersionRange(DatabaseEngineType = DatabaseEngineType.SqlAzureDatabase, MinMajor = 12)]
        public void Test_CreateClassificationScript_Sql2019AndAfterOnPrem_SqlAzure12AndAfter()
        {
            const string schemaName = "dbo";
            string tableNamePrefix = "ClassifiedTable";

            this.ExecuteWithDbDrop(
                database =>
                {
                    _SMO.Table table = DatabaseObjectHelpers.CreateTable(database, tableNamePrefix, schemaName, null, null, null, false);
                    var column1 = new _SMO.Column(table, "ColA", _SMO.DataType.Int) { SensitivityLabelName = "LabelName_A", SensitivityLabelId = "LabelId_A", SensitivityInformationTypeName = "InfoTypeName_A", SensitivityInformationTypeId = "InfoTypeId_A", SensitivityRank = SensitivityRank.High };
                    var column2 = new _SMO.Column(table, "ColB", _SMO.DataType.Int) { SensitivityLabelName = "LabelName_B", SensitivityInformationTypeName = "InfoTypeName_B" };
                    column1.Create();
                    column2.Create();

                    database.SensitivityClassifications.Refresh();
                    var scriptingPreferences = new ScriptingPreferences(database)
                    {
                        Behavior = ScriptBehavior.Create
                    };
                    scriptingPreferences.OldOptions.EnforceScriptingPreferences = true;

                    _SMO.SensitivityClassification sensitivityClassification1 = database.SensitivityClassifications[schemaName + "." + table.GetName(scriptingPreferences) + "." + column1.GetName(scriptingPreferences)];
                    _SMO.SensitivityClassification sensitivityClassification2 = database.SensitivityClassifications[schemaName + "." + table.GetName(scriptingPreferences) + "." + column2.GetName(scriptingPreferences)];

                    SmoTestBase.ValidateUrnScripting(database, new[] { sensitivityClassification1.Urn, sensitivityClassification2.Urn },
                    new[]
                    {
                        string.Format("ADD SENSITIVITY CLASSIFICATION TO [{0}].[{1}].[{2}] WITH (label = '{3}', label_id = '{4}', information_type = '{5}', information_type_id = '{6}', rank = {7});", schemaName, table.GetName(scriptingPreferences), column1.GetName(scriptingPreferences), "LabelName_A", "LabelId_A", "InfoTypeName_A", "InfoTypeId_A", SensitivityRank.High.ToString()),
                        string.Format("ADD SENSITIVITY CLASSIFICATION TO [{0}].[{1}].[{2}] WITH (label = '{3}', information_type = '{4}');", schemaName, table.GetName(scriptingPreferences), column2.GetName(scriptingPreferences), "LabelName_B", "InfoTypeName_B"),
                    }, scriptingPreferences, true);
                });
        }



        /// <summary>
        /// Verifying the script generated by ScriptMaker for Drop behavior when sensitivity labels are column properties.
        /// </summary>
        [TestMethod]
        [SupportedServerVersionRange(DatabaseEngineType = DatabaseEngineType.Standalone, MinMajor = 15)]
        [SupportedServerVersionRange(DatabaseEngineType = DatabaseEngineType.SqlAzureDatabase, MinMajor = 12)]
        public void Test_DropClassificationScript_Sql2019AndAfterOnPrem_SqlAzure12AndAfter()
        {
            const string schemaName = "dbo";
            string tableNamePrefix = "ClassifiedTable";

            this.ExecuteWithDbDrop(
                database =>
                {
                    _SMO.Table table = DatabaseObjectHelpers.CreateTable(database, tableNamePrefix, schemaName, null, null, null, false);
                    var column1 = new _SMO.Column(table, "ColA", _SMO.DataType.Int) { SensitivityLabelName = "LabelName_A", SensitivityLabelId = "LabelId_A", SensitivityInformationTypeName = "InfoTypeName_A", SensitivityInformationTypeId = "InfoTypeId_A", SensitivityRank = SensitivityRank.High };
                    var column2 = new _SMO.Column(table, "ColB", _SMO.DataType.Int) { SensitivityLabelName = "LabelName_B", SensitivityInformationTypeName = "InfoTypeName_B" };
                    column1.Create();
                    column2.Create();

                    database.SensitivityClassifications.Refresh();
                    var scriptingPreferences = new ScriptingPreferences(database)
                    {
                        Behavior = ScriptBehavior.Drop
                    };
                    scriptingPreferences.OldOptions.EnforceScriptingPreferences = true;

                    _SMO.SensitivityClassification sensitivityClassification1 = database.SensitivityClassifications[schemaName + "." + table.GetName(scriptingPreferences) + "." + column1.GetName(scriptingPreferences)];
                    _SMO.SensitivityClassification sensitivityClassification2 = database.SensitivityClassifications[schemaName + "." + table.GetName(scriptingPreferences) + "." + column2.GetName(scriptingPreferences)];

                    SmoTestBase.ValidateUrnScripting(database, new[] { sensitivityClassification1.Urn, sensitivityClassification2.Urn },
                    new[]
                    {
                        string.Format("DROP SENSITIVITY CLASSIFICATION FROM [{0}].[{1}].[{2}]", schemaName, table.GetName(scriptingPreferences), column1.GetName(scriptingPreferences)),
                        string.Format("DROP SENSITIVITY CLASSIFICATION FROM [{0}].[{1}].[{2}]", schemaName, table.GetName(scriptingPreferences), column2.GetName(scriptingPreferences)),
                    }, scriptingPreferences, true);
                });
        }



        /// <summary>
        /// Verifying the script generated by ScriptMaker for Drop and Create behavior when sensitivity labels are column properties.
        /// </summary>
        [TestMethod]
        [SupportedServerVersionRange(DatabaseEngineType = DatabaseEngineType.Standalone, MinMajor = 15)]
        [SupportedServerVersionRange(DatabaseEngineType = DatabaseEngineType.SqlAzureDatabase, MinMajor = 12)]
        public void Test_DropAndCreateClassificationScript_Sql2019AndAfterOnPrem_SqlAzure12AndAfter()
        {
            const string schemaName = "dbo";
            string tableNamePrefix = "ClassifiedTable";

            this.ExecuteWithDbDrop(
                database =>
                {
                    _SMO.Table table = DatabaseObjectHelpers.CreateTable(database, tableNamePrefix, schemaName, null, null, null, false);
                    var column1 = new _SMO.Column(table, "ColA", _SMO.DataType.Int) { SensitivityLabelName = "LabelName_A", SensitivityLabelId = "LabelId_A", SensitivityInformationTypeName = "InfoTypeName_A", SensitivityInformationTypeId = "InfoTypeId_A", SensitivityRank = SensitivityRank.High };
                    var column2 = new _SMO.Column(table, "ColB", _SMO.DataType.Int) { SensitivityLabelName = "LabelName_B", SensitivityInformationTypeName = "InfoTypeName_B" };
                    column1.Create();
                    column2.Create();

                    database.SensitivityClassifications.Refresh();
                    var scriptingPreferences = new ScriptingPreferences(database)
                    {
                        Behavior = ScriptBehavior.DropAndCreate
                    };
                    scriptingPreferences.OldOptions.EnforceScriptingPreferences = true;

                    _SMO.SensitivityClassification sensitivityClassification1 = database.SensitivityClassifications[schemaName + "." + table.GetName(scriptingPreferences) + "." + column1.GetName(scriptingPreferences)];
                    _SMO.SensitivityClassification sensitivityClassification2 = database.SensitivityClassifications[schemaName + "." + table.GetName(scriptingPreferences) + "." + column2.GetName(scriptingPreferences)];

                    SmoTestBase.ValidateUrnScripting(database, new[] { sensitivityClassification1.Urn, sensitivityClassification2.Urn },
                    new[]
                    {
                        string.Format("DROP SENSITIVITY CLASSIFICATION FROM [{0}].[{1}].[{2}]", schemaName, table.GetName(scriptingPreferences), column1.GetName(scriptingPreferences)),
                        string.Format("ADD SENSITIVITY CLASSIFICATION TO [{0}].[{1}].[{2}] WITH (label = '{3}', label_id = '{4}', information_type = '{5}', information_type_id = '{6}', rank = {7});", schemaName, table.GetName(scriptingPreferences), column1.GetName(scriptingPreferences), "LabelName_A", "LabelId_A", "InfoTypeName_A", "InfoTypeId_A", SensitivityRank.High.ToString()),
                        string.Format("DROP SENSITIVITY CLASSIFICATION FROM [{0}].[{1}].[{2}]", schemaName, table.GetName(scriptingPreferences), column2.GetName(scriptingPreferences)),
                        string.Format("ADD SENSITIVITY CLASSIFICATION TO [{0}].[{1}].[{2}] WITH (label = '{3}', information_type = '{4}');", schemaName, table.GetName(scriptingPreferences), column2.GetName(scriptingPreferences), "LabelName_B", "InfoTypeName_B"),
                    }, scriptingPreferences, true);
                });
        }
    }
}